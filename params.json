{"tagline":"An event-driven communication framework","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Cloudless","body":"## Welcome to Cloudless\r\n\r\nCloudless is an event-driven communication framework built on-top of [0MQ][zmq] to provide fast, reliable, easy-to-use library to address most application needs for communication over in-process, inter-process, or over the wire transports.\r\n\r\nUsing BSD sockets directly is such a waste of time for any modern application as almost always there will be a need to implement a few communication paradigms on-top of it, and that's where [0MQ][zmq] solves the problem, but not quite entirely.\r\n\r\n[0MQ][zmq] provides the most elegant way to communicate between any two parts of an application by providing a succinct API and utilizing a decentralized asynchronous message queues. Not only that, [0MQ][zmq] also provides communication patterns where one could easily define the routing construct of messages between any two parts in a system.\r\n\r\nCloudless comes in as a transparent abstraction layer on-top of [0MQ][zmq] to provide an ever-expanding set of communication devices and ultimately allow for constructing virtual networks with high level routing and abstract node descriptors.\r\n\r\n## Getting Started\r\n\r\nYou can start by downloading the latest version from the [downloads section][dl_section], follow the instructions in the `README` file to install Cloudless and then have fun with the following examples. You are also encouraged to look at the unit-tests in the project distribution for examples.\r\n\r\nComplete API documentation can be generated by running `make doc` at the command line. Or you can examine the header files.\r\n\r\n### Example 1\r\n\r\n```cpp\r\n#include <cloudless/context.hpp> // A wrapper for 0MQ contexts.\r\n#include <cloudless/message.hpp> // An abstraction for 0MQ messages.\r\n#include <cloudless/address.hpp> // An abstraction for 0MQ address format.\r\n#include <cloudless/pair.hpp> // A 0MQ PAIR socket.\r\n\r\nint main()\r\n{\r\n    cloudless::context ctx;\r\n    cloudless::address addr(cloudless::protocol::INPROC, \"nightclub\");\r\n\r\n    // Equivalent to socket(ctx, socket_type::PAIR)\r\n    cloudless::pair alice(ctx);\r\n    alice.bind(addr);\r\n\r\n    cloudless::pair bob(ctx);\r\n    bob.connect(addr);\r\n\r\n    cloudless::message msg(\"Hi Alice!\");\r\n    bob.send(msg);\r\n\r\n    alice.recv(msg);\r\n    if (msg.pop_head() == \"Hi Alice!\")\r\n        alice.send(msg.push_head(\"Hey Bob!\")\r\n            .push_tail(\"Let's have a drink\"));\r\n\r\n    // Once the socket object is out of\r\n    // scope close() is called.\r\n    bob.close();\r\n    alice.close();\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n### Example 2\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#include <cloudless/context.hpp>\r\n#include <cloudless/socket.hpp>\r\n#include <cloudless/message.hpp>\r\n#include <cloudless/edges.hpp>\r\n#include <cloudless/device.hpp>\r\n\r\nstruct echo : cloudless::device\r\n{\r\n    echo(const cloudless::edges& edges) :\r\n        cloudless::device(edges)\r\n    {}\r\n\r\n    // This function is called only once upon device start.\r\n    void on_init()\r\n    {\r\n        get_edges()[\"loopback\"][\"echo\"].psocket->bind(\"inproc://echo\");\r\n        std::cout << \"Device echo started.\" << std::endl;\r\n    }\r\n\r\n    // This function is called for every message\r\n    // that becomes available on the socket.\r\n    void on_recv(const string& edge_id, const string& edgepoint_id)\r\n    {\r\n        cloudless::edgepoint::point& point = get_edges()[edge_id][edgepoint_id];\r\n\r\n        cloudless::message msg;\r\n        if (point.psocket->recv(msg)) {\r\n            std::cout << \"Received a message: \"\r\n                << (string)*msg.head() << std::endl;\r\n            point.psocket->send(msg);\r\n        }\r\n    }\r\n\r\n    // This function is called only once upon device shutdown.\r\n    void on_shutdown()\r\n    {\r\n        get_edges()[\"loopback\"][\"echo\"].psocket->close();\r\n        std::cout << \"Device echo is shutdown.\" << std::endl;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    cloudless::edgepoint loopback;\r\n\r\n    // We only specify the socket type here,\r\n    // it will be initialized in the device. The point will assume\r\n    // the usage of the default global 0MQ context.\r\n    loopback::point echo_point = { cloudless::socket_type::PAIR };\r\n    loopback.add(\"echo\", echo_point);\r\n\r\n    cloudless::edges eds;\r\n    eds.add(\"loopback\", loopback);\r\n\r\n    echo echo_device(eds);\r\n    echo_device.start();\r\n\r\n    // It is a must to use the same 0MQ context\r\n    // between INPROC sockets and therefore we use the\r\n    // default global 0MQ context instead of creating a new one. \r\n    socket echo_socket(*cloudless::context::instance(), cloudless::socket_type::PAIR);\r\n    echo_socket.connect(\"inproc://echo\");\r\n\r\n    cloudless::message msg(\"Echo!\");\r\n    echo_socket.send(msg);\r\n    echo_socket.close();\r\n\r\n    // This is an asynchronous call.\r\n    // The destructor will block until the thread actually stops.\r\n    echo_device.stop();\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n## How to Contribute\r\n\r\nThere are endless ways to contribute to Cloudless. Though we encourage you to bring your thoughts to the development mailing list first to make sure that no one else is working on what you intend to work on.\r\n\r\nYou can contribute to the [Wiki Pages][wiki_section] section by writing usage documentation examples. You can also contribute code by making a fork and submit pull requests on the `development` branch. Note that you should not code against the `master` branch as it is only used for releases and hot-fixes.\r\n\r\n## Mailing Lists\r\n* Development: http://groups.google.com/group/cloudless-dev?hl=en\r\n* Announcements: http://groups.google.com/group/cloudless-announce?hl=en\r\n\r\n[zmq]: http://www.zeromq.org/ \"0MQ Website\"\r\n[dl_section]: https://github.com/Databracket/cloudless/downloads/ \"Cloudless Downloads Section\"\r\n[wiki_section]: https://github.com/Databracket/cloudless/wiki/ \"Cloudless Wiki Section\"","google":""}
